/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        def {
            bindings = <
&lt 4 LEFT_BRACKET  &kp Q  &kp W    &kp E      &kp R  &mt LG(NUMBER_4) T    &mt LC(N5) Y        &kp U             &kp I        &kp O           &kp P              &lt 4 RIGHT_BRACKET
&mt LG(D) GRAVE     &kp A  &kp S    &kp D      &kp F  &mt LG(NUMBER_3) G    &mt LC(NUMBER_4) H  &mt LEFT_SHIFT J  &mt LCTRL K  &mt LEFT_ALT L  &mt LEFT_GUI SEMI  &kp SQT
&mt CAPS ESCAPE     &kp Z  &kp X    &kp C      &kp V  &mt LG(NUMBER_5) B    &kp N               &kp M             &kp COMMA    &kp PERIOD      &kp LG(F24)        &kp LG(F23)
                           &kp F17  &lt 3 F18  &mo 2  &lt 1 SPACE           &kp ENTER           &kp BACKSPACE     &kp DELETE   &kp TAB
            >;
        };

        num {
            bindings = <
&kp F21  &kp PLUS   &mt LG(KP_NUMBER_7) NUMBER_7  &mt LG(KP_NUMBER_8) NUMBER_8  &mt LG(KP_NUMBER_9) NUMBER_9  &mt UNDERSCORE MINUS    &trans  &trans          &kp UP_ARROW    &trans     &trans  &trans
&kp F23  &kp EQUAL  &mt LG(KP_NUMBER_4) NUMBER_4  &mt LG(KP_NUMBER_5) NUMBER_5  &mt LG(KP_NUMBER_6) NUMBER_6  &kp F19                 &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &trans  &trans
&kp F22  &kp F24    &mt LG(KP_NUMBER_1) NUMBER_1  &mt LG(KP_NUMBER_2) NUMBER_2  &mt LG(KP_NUMBER_3) NUMBER_3  &kp F20                 &trans  &trans          &trans          &trans     &trans  &trans
                    &mt F17 NUMBER_0              &kp F18                       &trans                        &trans                  &trans  &trans          &trans          &trans
            >;
        };

        right_keys {
            bindings = <
&kp RIGHT_BRACKET  &kp P          &kp O       &kp I      &kp U   &kp Y     &trans  &trans  &trans  &trans  &trans  &trans
&kp SQT            &kp SEMICOLON  &kp L       &kp K      &kp J   &kp H     &trans  &trans  &trans  &trans  &trans  &trans
&kp LG(F23)        &kp LG(F24)    &kp PERIOD  &kp COMMA  &kp M   &kp N     &trans  &trans  &trans  &trans  &trans  &trans
                                  &kp F17     &kp F18    &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };

        multi {
            bindings = <
&kp LG(S)  &kp LG(W)   &trans            &kp LG(F12)       &kp LG(F4)     &kp LG(F7)       &trans  &trans  &trans  &trans  &trans  &trans
&kp LG(A)  &kp LG(F2)  &kp LG(F5)        &kp LG(NUMBER_2)  &kp LG(F6)     &kp LG(F8)       &trans  &trans  &trans  &trans  &trans  &trans
&kp LG(Z)  &kp LG(F1)  &kp LG(NUMBER_1)  &kp LG(F9)        &kp LG(F10)    &kp LG(F11)      &trans  &trans  &trans  &trans  &trans  &trans
                       &mt LC(D) TAB     &trans            &kp LC(PG_UP)  &kp LC(PG_DN)    &trans  &trans  &trans  &trans
            >;
        };

        sys {
            bindings = <
&trans  &trans        &trans        &trans        &sys_reset      &bootloader     &bootloader   &sys_reset      &trans        &trans        &trans        &trans
&trans  &trans        &trans        &out OUT_TOG  &bt BT_CLR_ALL  &bt BT_CLR      &bt BT_CLR    &bt BT_CLR_ALL  &out OUT_TOG  &trans        &trans        &trans
&trans  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1    &bt BT_SEL 0    &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
                      &trans        &trans        &trans          &trans          &trans        &trans          &trans        &trans
            >;
        };
    };
};
