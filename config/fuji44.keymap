/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        def {
            bindings = <
&kp LEFT_BRACKET  &kp Q       &kp W           &kp E            &kp R             &mt LC(N5) T          &mt LC(N5) Y        &kp U             &kp I        &kp O           &kp P              &kp RIGHT_BRACKET
&kp GRAVE         &mt LWIN A  &mt LEFT_ALT S  &mt LCTRL D      &mt LEFT_SHIFT F  &mt LC(NUMBER_4) G    &mt LC(NUMBER_4) H  &mt LEFT_SHIFT J  &mt LCTRL K  &mt LEFT_ALT L  &mt LEFT_GUI SEMI  &kp SQT
&mt CAPS ESCAPE   &kp Z       &kp X           &mt INS C        &mt HOME V        &mt END B             &kp N               &kp M             &kp COMMA    &kp PERIOD      &kp LS(N7)         &kp EXCLAMATION
                              &lt 4 SLASH     &lt 3 RS(SLASH)  &mo 2             &lt 1 SPACE           &lt 3 ENTER         &lt 4 BACKSPACE   &trans       &trans
            >;
        };

        num {
            bindings = <
&kp LEFT_PARENTHESIS   &kp PLUS                  &kp N7        &mt STAR N8          &kp N9        &kp MINUS           &trans  &trans          &kp UP_ARROW    &trans     &trans  &trans
&kp LS(NUMBER_2)       &kp EQUAL                 &kp NUMBER_4  &mt PERCENT N5       &kp NUMBER_6  &kp LS(NUMBER_6)    &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &trans  &trans
&kp RIGHT_PARENTHESIS  &kp LS(NON_US_BACKSLASH)  &kp NUMBER_1  &mt LA(NUMBER_2) N2  &mt HASH N3   &kp LS(NUMBER_4)    &trans  &trans          &trans          &trans     &trans  &trans
                                                 &kp NUMBER_0  &mt SLASH RS(SLASH)  &trans        &trans              &trans  &trans          &trans          &trans
            >;
        };

        Right_keys {
            bindings = <
&kp RIGHT_BRACKET  &kp P          &kp O       &kp I          &kp U   &kp Y     &trans  &trans  &trans  &trans  &trans  &trans
&kp SQT            &kp SEMICOLON  &kp L       &kp K          &kp J   &kp H     &trans  &trans  &trans  &trans  &trans  &trans
&kp EXCL           &kp LS(N7)     &kp PERIOD  &kp COMMA      &kp M   &kp N     &trans  &trans  &trans  &trans  &trans  &trans
                                  &kp SLASH   &kp RS(SLASH)  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };

        nav {
            bindings = <
&kp LG(S)  &kp LG(Q)  &kp LG(W)         &kp LA(E)         &kp LA(R)  &kp LA(T)    &trans  &trans  &trans  &trans  &trans  &trans
&kp LG(A)  &kp LA(I)  &kp LA(S)         &kp LC(NUMBER_3)  &kp LA(F)  &kp LA(L)    &trans  &trans  &trans  &trans  &trans  &trans
&kp LG(Z)  &kp LA(Z)  &kp LC(NUMBER_1)  &kp LA(C)         &kp LA(V)  &kp LA(B)    &trans  &trans  &trans  &trans  &trans  &trans
                      &kp TAB           &trans            &kp PG_UP  &kp PG_DN    &trans  &trans  &trans  &trans
            >;
        };

        sys {
            bindings = <
&trans  &trans        &trans        &trans        &trans          &trans          &trans        &trans          &trans        &trans        &trans        &bootloader
&trans  &trans        &trans        &trans        &bt BT_CLR_ALL  &bt BT_CLR      &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans        &trans
&trans  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1    &bt BT_SEL 0    &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &sys_reset
                      &trans        &trans        &trans          &trans          &trans        &trans          &trans        &trans
            >;
        };
    };
};
